
public class Operator_08 {

	public static void main(String[] args) {
		// 쉬프트 연산자
		// 비트연산자의 일종으로 특정 변수의 비트 중 1인 자리를 이동시키는 연산자
		// <<(레프트 쉬프트), >>(라이트 쉬프트)
		
		int num = 10;
		
		// 레프트 쉬프트
		// 좌항에는 변수, 우항에는 정수타입 값
		// 좌항의 비트 중 1인 자리를 우항의 값 만큼 왼쪽으로 이동하는 명령
		// 좌항의 변수값에서 2의 n승만큼 곱한 결과를 돌려준다.
		
		//  	 16 8 4 2 1
		// num :  0 1 0 1 0
		// <<1 :  1 0 1 0 0
		
		System.out.println(num << 1);
		
		
		// 라이트 쉬프트
		// 좌항에는 변수, 우항에는 정수타입 값
		// 좌항의 비트 중 1인 자리를 우항의 값 만큼 오른쪽으로 이동하는 명령
		// 좌항의 변수값에서 2의 n승만큼 나눈 결과를 돌려준다.
				
		//  	 16 8 4 2 1
		// num :  0 1 0 1 0
		// <<1 :  0 0 1 0 1
		
		System.out.println(num >> 1);
		
		// 레프트/라이트 쉬프트 연산자는 원본값을 수정하지 않음
		// 비트를 이동시킨 새로운 값을 반환
		
		
		// 변형된 타입의 대입연산자를 사용하여 쉬프트 연산의 결과를 저장하는 방법
		num <<= 1; // num = num << 1;
		
		System.out.println(num);
		
		// byte b=;, b^=(1<<4) 하면 4번째 비트가 스위칭된다.
		//			 b|=(1<<4) 하면 4번째 비트가 1로 바뀐다.
		//			 (b>>4)&1    하면 4번째 비트가 1인지 확인
		

	}

}
